{"version":3,"sources":["page/Edit/style.module.css","page/Edit/Edit.js"],"names":["module","exports","connect","state","props","useState","editor","setEditor","title","setTitle","history","useHistory","routeParams","useParams","articleToEdit","id","notes","articleData","list","searchMap","useEffect","newEditor","Quill","modules","toolbar","header","theme","root","innerHTML","content","className","style","editorContainer","titleInputContainer","titleInput","onChange","e","currentTarget","value","placeholder","contentInput","iconDone","onClick","document","querySelector","text","getText","dispatch","submit","summary","slice","push"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,gBAAkB,+BAA+B,UAAY,yBAAyB,gBAAkB,+BAA+B,uBAAyB,sCAAsC,oBAAsB,mCAAmC,WAAa,0BAA0B,aAAe,4BAA4B,gBAAkB,+BAA+B,eAAiB,8BAA8B,mBAAqB,kCAAkC,2BAA6B,0CAA0C,SAAW,0B,qsBCqF5mBC,uBAFE,SAACC,GAAD,YAAiBA,KAEnBD,EA1EF,SAACE,GAAW,IAAD,EACMC,mBAAS,MADf,mBACfC,EADe,KACPC,EADO,OAEIF,mBAAS,IAFb,mBAEfG,EAFe,KAERC,EAFQ,KAGhBC,EAAUC,cACVC,EAAcC,cAChBC,EAAgB,KAEpB,GAAIF,EAAYG,GAAI,CAAC,IAAD,EACUX,EAAMY,OAAS,GAErCC,EAHY,EACVC,KADU,EACJC,UACiBP,EAAYG,KAE3CD,EAAgBG,EAGlBG,qBAAU,WACR,IAAKd,EAAQ,CACX,IAAMe,EAAY,IAAIC,IAAM,UAAW,CACrCC,QAAS,CACPC,QAAS,CACP,CAAC,CAAEC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG,KAC3B,CAAC,CAAE,MAAS,IAAM,CAAE,WAAc,KAClC,CAAC,OAAQ,SAAU,YAAa,SAAU,WAG9CC,MAAO,SAETnB,EAAUc,GACNP,IACGN,GAAOC,EAASK,EAAcN,OACnCa,EAAUM,KAAKC,UAAYd,EAAce,YAG5C,CAACvB,EAAQQ,EAAeN,IAgB3B,OACE,yBAAKsB,UAAWC,IAAMC,iBAEpB,yBAAKF,UAAWC,IAAME,qBACpB,2BACEH,UAAWC,IAAMG,WACjBC,SAAU,SAACC,GAAD,OAAO3B,EAAS2B,EAAEC,cAAcC,QAC1CA,MAAO9B,EACP+B,YAAa,0CAIjB,yBACGT,UAAWC,IAAMS,aAClBzB,GAAG,WAGL,yBAAKe,UAAWC,IAAMU,SAAUC,QAAS,kBA/B9B,WACb,IACMb,EADKc,SAASC,cAAc,cACfhB,UACbiB,EAAOvC,EAAOwC,WAAa,GACjCC,IAAS/B,MAAMgC,OAAf,KACMlC,GAAiB,GADvB,CAEEN,MAAOA,GAAS,qBAChBqB,QAASA,GAAW,GACpBoB,QAASJ,EAAKK,MAAM,EAAG,OAGzBxC,EAAQyC,KAAK,KAoBoCH,KAC7C,uBAAGlB,UAAU","file":"static/js/5.06aa3077.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyExtraStyle\":\"style_bodyExtraStyle__1iqA6\",\"editorContainer\":\"style_editorContainer__3uFRH\",\"editorBar\":\"style_editorBar__1sNuQ\",\"editorBarButton\":\"style_editorBarButton__3A2vo\",\"editorBarButtonSelcted\":\"style_editorBarButtonSelcted__3cz3a\",\"titleInputContainer\":\"style_titleInputContainer__3AkwD\",\"titleInput\":\"style_titleInput__1z1EM\",\"contentInput\":\"style_contentInput__3EVLe\",\"pannelContainer\":\"style_pannelContainer__14E6a\",\"pannelFontSize\":\"style_pannelFontSize__rV5yo\",\"pannelFontSizeItem\":\"style_pannelFontSizeItem__j4DJc\",\"pannelFontSizeItemSelected\":\"style_pannelFontSizeItemSelected__2Uoqe\",\"iconDone\":\"style_iconDone__rZTDE\"};","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { dispatch } from '../../store';\n\nimport Quill from 'quill';\n\nimport 'quill/dist/quill.snow.css';\n\nimport style from './style.module.css';\n\nconst Edit = (props) => {\n  const [editor, setEditor] = useState(null);\n  const [title, setTitle] = useState('');\n  const history = useHistory();\n  const routeParams = useParams();\n  let articleToEdit = null;\n\n  if (routeParams.id) {\n    const { list, searchMap } = props.notes || {};\n    const articleIndex = searchMap[routeParams.id];\n    const articleData = list[articleIndex];\n    articleToEdit = articleData;\n  }\n\n  useEffect(() => {\n    if (!editor) {\n      const newEditor = new Quill('#editor', {\n        modules: {\n          toolbar: [\n            [{ header: [1, 2, 3, 4, 5, false] }],\n            [{ 'color': [] }, { 'background': [] }],  \n            ['bold', 'italic', 'underline', 'strike', 'align'],\n          ]\n        },\n        theme: 'snow'\n      });\n      setEditor(newEditor);\n      if (articleToEdit) {\n        if (!title) setTitle(articleToEdit.title);\n        newEditor.root.innerHTML = articleToEdit.content;\n      }\n    }\n  }, [editor, articleToEdit, title]);\n\n  const submit = () => {\n    const el = document.querySelector('.ql-editor');\n    const content = el.innerHTML;\n    const text = editor.getText() || '';\n    dispatch.notes.submit({\n      ...(articleToEdit || {}),\n      title: title || '无标题',\n      content: content || '',\n      summary: text.slice(0, 30),\n    });\n\n    history.push('/');\n  };\n\n  return (\n    <div className={style.editorContainer}>\n      {/* 标题输入框 */}\n      <div className={style.titleInputContainer}>\n        <input\n          className={style.titleInput}\n          onChange={(e) => setTitle(e.currentTarget.value)}\n          value={title}\n          placeholder={'点此设置标题'}\n        />\n      </div>\n      {/* 编辑器 */}\n      <div\n         className={style.contentInput}\n        id=\"editor\"\n      >\n      </div>\n      <div className={style.iconDone} onClick={() => submit()}>\n        <i className=\"iconfont icon-jurassic_complete\" />\n      </div>\n    </div>\n  );\n}\n\nconst mapState = (state) => ({ ...state });\n\nexport default connect(mapState)(Edit);\n"],"sourceRoot":""}